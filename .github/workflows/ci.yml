name: CI Workflows

on:
  push:
    branches:
      - main

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.16.0'

      - name: Install pnpm globally
        run: |
          npm install -g pnpm  # Instala pnpm globalmente

      - name: Install dependencies
        run: |
          pnpm install  # Instala las dependencias usando pnpm

      - name: Run tests
        run: |
          pnpm run test

  semantic-release:
    runs-on: ubuntu-latest
    needs: tests  # Asegura que el trabajo de pruebas se ejecute antes de hacer el release

    permissions:
      contents: write
      id-token: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.16.0'

      - name: Install pnpm globally
        run: |
          npm install -g pnpm  # Instala pnpm globalmente

      - name: Install dependencies
        run: |
          pnpm install  # Instala las dependencias usando pnpm

      # Paso 1: Crear el archivo JSON con las credenciales
      - name: Crear archivo de credenciales JSON
        run: |
          printf "%s" "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" > /tmp/credentials.json
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      # Paso 2: Autenticar con Google Cloud
      - name: Autenticar con Google Cloud
        run: |
          gcloud auth activate-service-account --key-file /tmp/credentials.json
          
      # Paso 3: Instalar el SDK de Google Cloud (si es necesario)
      - name: Install Google Cloud SDK (if needed)
        run: |
          curl https://sdk.cloud.google.com | bash
          source $HOME/google-cloud-sdk/path.bash.inc
        if: runner.os == 'Linux'

      # Paso 4: Obtener secretos desde Google Secret Manager
      - name: Fetch secrets from Google Secret Manager
        run: |
          SECRET_GH_TOKEN=$(gcloud secrets versions access latest --secret="GH_TOKEN")
          SECRET_NPM_TOKEN=$(gcloud secrets versions access latest --secret="NPM_TOKEN")
          echo "GH_TOKEN=$SECRET_GH_TOKEN" >> $GITHUB_ENV
          echo "NPM_TOKEN=$SECRET_NPM_TOKEN" >> $GITHUB_ENV

      # Paso 5: Ejecutar Semantic Release
      - name: Run Semantic Release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          pnpm exec semantic-release