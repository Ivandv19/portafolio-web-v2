name: CI Workflows

on:
  push:
    branches:
      - main
      - develop 

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.16.0"

      - name: Install pnpm globally
        run: |
          npm install -g pnpm

      - name: Install dependencies
        run: |
          pnpm install

      - name: Run tests
        run: |
          pnpm run test

  semantic-release:
    runs-on: ubuntu-latest
    needs: tests

    permissions:
      contents: write
      id-token: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.16.0"

      - name: Install pnpm globally
        run: |
          npm install -g pnpm

      - name: Install dependencies
        run: |
          pnpm install

      - name: Crear archivo de credenciales JSON vacÃ­o
        run: |
          touch /tmp/credentials.json

      - name: Decodificar y asignar valor del secreto de Google Cloud al archivo
        run: |
          echo "${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}" | base64 --decode > /tmp/credentials.json

      - name: Autenticar con Google Cloud
        run: |
          gcloud auth activate-service-account --key-file /tmp/credentials.json

      - name: Configurar el proyecto de Google Cloud
        run: |
          gcloud config set project "portafolio-web-v2"

      - name: Install Google Cloud SDK (if needed)
        run: |
          curl https://sdk.cloud.google.com | bash
          source $HOME/google-cloud-sdk/path.bash.inc
        if: runner.os == 'Linux'

      - name: Fetch secrets from Google Secret Manager
        run: |
          SECRET_GH_TOKEN=$(gcloud secrets versions access latest --secret="GH_TOKEN")
          SECRET_NPM_TOKEN=$(gcloud secrets versions access latest --secret="NPM_TOKEN")
          echo "GH_TOKEN=$SECRET_GH_TOKEN" >> $GITHUB_ENV
          echo "NPM_TOKEN=$SECRET_NPM_TOKEN" >> $GITHUB_ENV

      - name: Run Semantic Release
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          pnpm exec semantic-release
